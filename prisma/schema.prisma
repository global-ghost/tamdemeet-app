datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model Session {
  id String @id @default(cuid())
}

model UserSession {
  id          String   @id @default(cuid())
  userId      String   @unique
  sessionsIds String[]
  user        User     @relation(fields: [userId], references: [id])
}

model UserLocation {
  id        String   @id @default(cuid())
  lat       Float
  lng       Float
  userId    String   @unique
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  login                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isTwoFactorEnabled    Boolean                @default(false)
  isTwoFactorAvailable  Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  UserSession           UserSession?
  UserLocation          UserLocation?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     Status   @default(PENDING)
  createdAt  DateTime @default(now())

  @@unique([senderId, receiverId])
}

model Event {
  id               String    @id @default(cuid())
  lat              Float
  lng              Float
  title            String
  description      String?
  ownerId          String
  date             DateTime?
  invitedUserIds   String[]
  confirmedUserIds String[]
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}
